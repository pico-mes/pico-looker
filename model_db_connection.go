/*
 * Looker API 4.0 (Experimental) Reference
 *
 *  Welcome to the future! This is an early preview of our next-generation Looker API 4.0. API 4.0 runs alongside APIs 3.1 and 3.0. We've tagged 4.0 as \"experimental\" to reflect that we have more work planned for API 4.0 which may include breaking changes. Please pardon our dust while we remodel a few rooms!  ### In This Release  We're spinning up this new API 4.0 version so that we can make adjustments to our API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to our stable API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Java, and more. Looker is also creating client SDKs to call the Looker API from these and other languages. These client SDKs will be available as pre-built packages for download from public repositories such as npmjs.org, RubyGems.org, PyPi.org. If you use an IDE for software development, you will soon be able to install a Looker SDK for your programming language with the click of a button!  While API 3.1 is still the defacto Looker API (\"current\", \"stable\", \"default\", etc), the bulk of our development activity will gradually shift to API 4.0.  
 *
 * API version: 4.0.7.18
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package looker
// DbConnection struct for DbConnection
type DbConnection struct {
	// Operations the current user is able to perform on this object
	Can map[string]bool `json:"can,omitempty"`
	// Name of the connection. Also used as the unique identifier
	Name string `json:"name,omitempty"`
	Dialect Dialect `json:"dialect,omitempty"`
	// SQL Runner snippets for this connection
	Snippets []Snippet `json:"snippets,omitempty"`
	// True if PDTs are enabled on this connection
	PdtsEnabled bool `json:"pdts_enabled,omitempty"`
	// Host name/address of server
	Host string `json:"host,omitempty"`
	// Port number on server
	Port int64 `json:"port,omitempty"`
	// Username for server authentication
	Username string `json:"username,omitempty"`
	// (Write-Only) Password for server authentication
	Password string `json:"password,omitempty"`
	// Whether the connection uses OAuth for authentication.
	UsesOauth bool `json:"uses_oauth,omitempty"`
	// (Write-Only) Base64 encoded Certificate body for server authentication (when appropriate for dialect).
	Certificate string `json:"certificate,omitempty"`
	// (Write-Only) Certificate keyfile type - .json or .p12
	FileType string `json:"file_type,omitempty"`
	// Database name
	Database string `json:"database,omitempty"`
	// Time zone of database
	DbTimezone string `json:"db_timezone,omitempty"`
	// Timezone to use in queries
	QueryTimezone string `json:"query_timezone,omitempty"`
	// Scheme name
	Schema string `json:"schema,omitempty"`
	// Maximum number of concurrent connection to use
	MaxConnections int64 `json:"max_connections,omitempty"`
	// Maximum size of query in GBs (BigQuery only, can be a user_attribute name)
	MaxBillingGigabytes string `json:"max_billing_gigabytes,omitempty"`
	// Use SSL/TLS when connecting to server
	Ssl bool `json:"ssl,omitempty"`
	// Verify the SSL
	VerifySsl bool `json:"verify_ssl,omitempty"`
	// Name of temporary database (if used)
	TmpDbName string `json:"tmp_db_name,omitempty"`
	// Additional params to add to JDBC connection string
	JdbcAdditionalParams string `json:"jdbc_additional_params,omitempty"`
	// Connection Pool Timeout, in seconds
	PoolTimeout int64 `json:"pool_timeout,omitempty"`
	// (Read/Write) SQL Dialect name
	DialectName string `json:"dialect_name,omitempty"`
	// Creation date for this connection
	CreatedAt string `json:"created_at,omitempty"`
	// Id of user who last modified this connection configuration
	UserId string `json:"user_id,omitempty"`
	// Is this an example connection?
	Example bool `json:"example,omitempty"`
	// (Limited access feature) Are per user db credentials enabled. Enabling will remove previously set username and password
	UserDbCredentials bool `json:"user_db_credentials,omitempty"`
	// Fields whose values map to user attribute names
	UserAttributeFields []string `json:"user_attribute_fields,omitempty"`
	// Cron string specifying when maintenance such as PDT trigger checks and drops should be performed
	MaintenanceCron string `json:"maintenance_cron,omitempty"`
	// Unix timestamp at start of last completed PDT trigger check process
	LastRegenAt string `json:"last_regen_at,omitempty"`
	// Unix timestamp at start of last completed PDT reap process
	LastReapAt string `json:"last_reap_at,omitempty"`
	// Precache tables in the SQL Runner
	SqlRunnerPrecacheTables bool `json:"sql_runner_precache_tables,omitempty"`
	// SQL statements (semicolon separated) to issue after connecting to the database. Requires `custom_after_connect_statements` license feature
	AfterConnectStatements string `json:"after_connect_statements,omitempty"`
	PdtContextOverride DbConnectionOverride `json:"pdt_context_override,omitempty"`
	// Is this connection created and managed by Looker
	Managed bool `json:"managed,omitempty"`
	// The Id of the ssh tunnel this connection uses
	TunnelId string `json:"tunnel_id,omitempty"`
	// Maximum number of threads to use to build PDTs in parallel
	PdtConcurrency int64 `json:"pdt_concurrency,omitempty"`
	// When disable_context_comment is true comment will not be added to SQL
	DisableContextComment bool `json:"disable_context_comment,omitempty"`
}
