/*
 * Looker API 4.0 (Experimental) Reference
 *
 *  Welcome to the future! This is an early preview of our next-generation Looker API 4.0. API 4.0 runs alongside APIs 3.1 and 3.0. We've tagged 4.0 as \"experimental\" to reflect that we have more work planned for API 4.0 which may include breaking changes. Please pardon our dust while we remodel a few rooms!  ### In This Release  We're spinning up this new API 4.0 version so that we can make adjustments to our API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to our stable API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Java, and more. Looker is also creating client SDKs to call the Looker API from these and other languages. These client SDKs will be available as pre-built packages for download from public repositories such as npmjs.org, RubyGems.org, PyPi.org. If you use an IDE for software development, you will soon be able to install a Looker SDK for your programming language with the click of a button!  While API 3.1 is still the defacto Looker API (\"current\", \"stable\", \"default\", etc), the bulk of our development activity will gradually shift to API 4.0.  
 *
 * API version: 4.0.7.18
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package looker
// QueryTask struct for QueryTask
type QueryTask struct {
	// Operations the current user is able to perform on this object
	Can map[string]bool `json:"can,omitempty"`
	// Unique Id
	Id string `json:"id,omitempty"`
	// Id of query
	QueryId int64 `json:"query_id,omitempty"`
	Query Query `json:"query,omitempty"`
	// whether or not to generate links in the query response.
	GenerateLinks bool `json:"generate_links,omitempty"`
	// Use production models to run query (even is user is in dev mode).
	ForceProduction bool `json:"force_production,omitempty"`
	// Prefix to use for drill links.
	PathPrefix string `json:"path_prefix,omitempty"`
	// Whether or not to use the cache
	Cache bool `json:"cache,omitempty"`
	// Whether or not to run table calculations on the server
	ServerTableCalcs bool `json:"server_table_calcs,omitempty"`
	// Retrieve any results from cache even if the results have expired.
	CacheOnly bool `json:"cache_only,omitempty"`
	// cache key used to cache query.
	CacheKey string `json:"cache_key,omitempty"`
	// Status of query task.
	Status string `json:"status,omitempty"`
	// Source of query task.
	Source string `json:"source,omitempty"`
	// Runtime of prior queries.
	Runtime float32 `json:"runtime,omitempty"`
	// Rebuild PDTS used in query.
	RebuildPdts bool `json:"rebuild_pdts,omitempty"`
	// Source of the results of the query.
	ResultSource string `json:"result_source,omitempty"`
	// Id of look associated with query.
	LookId int64 `json:"look_id,omitempty"`
	// Id of dashboard associated with query.
	DashboardId string `json:"dashboard_id,omitempty"`
	// The data format of the query results.
	ResultFormat string `json:"result_format,omitempty"`
}
