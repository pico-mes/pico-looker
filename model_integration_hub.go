/*
 * Looker API 4.0 (Experimental) Reference
 *
 *  Welcome to the future! This is an early preview of our next-generation Looker API 4.0. API 4.0 runs alongside APIs 3.1 and 3.0. We've tagged 4.0 as \"experimental\" to reflect that we have more work planned for API 4.0 which may include breaking changes. Please pardon our dust while we remodel a few rooms!  ### In This Release  We're spinning up this new API 4.0 version so that we can make adjustments to our API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to our stable API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Java, and more. Looker is also creating client SDKs to call the Looker API from these and other languages. These client SDKs will be available as pre-built packages for download from public repositories such as npmjs.org, RubyGems.org, PyPi.org. If you use an IDE for software development, you will soon be able to install a Looker SDK for your programming language with the click of a button!  While API 3.1 is still the defacto Looker API (\"current\", \"stable\", \"default\", etc), the bulk of our development activity will gradually shift to API 4.0.  
 *
 * API version: 4.0.7.18
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package looker
// IntegrationHub struct for IntegrationHub
type IntegrationHub struct {
	// Operations the current user is able to perform on this object
	Can map[string]bool `json:"can,omitempty"`
	// ID of the hub.
	Id int64 `json:"id,omitempty"`
	// URL of the hub.
	Url string `json:"url,omitempty"`
	// Label of the hub.
	Label string `json:"label,omitempty"`
	// Whether this hub is a first-party integration hub operated by Looker.
	Official bool `json:"official,omitempty"`
	// An error message, present if the integration hub metadata could not be fetched. If this is present, the integration hub is unusable.
	FetchErrorMessage string `json:"fetch_error_message,omitempty"`
	// (Write-Only) An authorization key that will be sent to the integration hub on every request.
	AuthorizationToken string `json:"authorization_token,omitempty"`
	// Whether the authorization_token is set for the hub.
	HasAuthorizationToken bool `json:"has_authorization_token,omitempty"`
	// Whether the legal agreement message has been signed by the user. This only matters if legal_agreement_required is true.
	LegalAgreementSigned bool `json:"legal_agreement_signed,omitempty"`
	// Whether the legal terms for the integration hub are required before use.
	LegalAgreementRequired bool `json:"legal_agreement_required,omitempty"`
	// The legal agreement text for this integration hub.
	LegalAgreementText string `json:"legal_agreement_text,omitempty"`
}
