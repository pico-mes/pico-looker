/*
 * Looker API 4.0 (Experimental) Reference
 *
 *  Welcome to the future! This is an early preview of our next-generation Looker API 4.0. API 4.0 runs alongside APIs 3.1 and 3.0. We've tagged 4.0 as \"experimental\" to reflect that we have more work planned for API 4.0 which may include breaking changes. Please pardon our dust while we remodel a few rooms!  ### In This Release  We're spinning up this new API 4.0 version so that we can make adjustments to our API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to our stable API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Java, and more. Looker is also creating client SDKs to call the Looker API from these and other languages. These client SDKs will be available as pre-built packages for download from public repositories such as npmjs.org, RubyGems.org, PyPi.org. If you use an IDE for software development, you will soon be able to install a Looker SDK for your programming language with the click of a button!  While API 3.1 is still the defacto Looker API (\"current\", \"stable\", \"default\", etc), the bulk of our development activity will gradually shift to API 4.0.  
 *
 * API version: 4.0.7.18
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package looker
// HomepageItem struct for HomepageItem
type HomepageItem struct {
	// Operations the current user is able to perform on this object
	Can map[string]bool `json:"can,omitempty"`
	// Name of user who created the content this item is based on
	ContentCreatedBy string `json:"content_created_by,omitempty"`
	// Content favorite id associated with the item this content is based on
	ContentFavoriteId int64 `json:"content_favorite_id,omitempty"`
	// Content metadata id associated with the item this content is based on
	ContentMetadataId int64 `json:"content_metadata_id,omitempty"`
	// Last time the content that this item is based on was updated
	ContentUpdatedAt string `json:"content_updated_at,omitempty"`
	// Custom description entered by the user, if present
	CustomDescription string `json:"custom_description,omitempty"`
	// (Write-Only) base64 encoded image data
	CustomImageDataBase64 string `json:"custom_image_data_base64,omitempty"`
	// Custom image_url entered by the user, if present
	CustomImageUrl string `json:"custom_image_url,omitempty"`
	// Custom title entered by the user, if present
	CustomTitle string `json:"custom_title,omitempty"`
	// Custom url entered by the user, if present
	CustomUrl string `json:"custom_url,omitempty"`
	// Dashboard to base this item on
	DashboardId int64 `json:"dashboard_id,omitempty"`
	// The actual description for display
	Description string `json:"description,omitempty"`
	// Number of times content has been favorited, if present
	FavoriteCount int64 `json:"favorite_count,omitempty"`
	// Associated Homepage Section
	HomepageSectionId int64 `json:"homepage_section_id,omitempty"`
	// Unique Id
	Id int64 `json:"id,omitempty"`
	// The actual image_url for display
	ImageUrl string `json:"image_url,omitempty"`
	// The container folder name of the content
	Location string `json:"location,omitempty"`
	// Look to base this item on
	LookId int64 `json:"look_id,omitempty"`
	// LookML Dashboard to base this item on
	LookmlDashboardId string `json:"lookml_dashboard_id,omitempty"`
	// An arbitrary integer representing the sort order within the section
	Order int64 `json:"order,omitempty"`
	// Number of seconds it took to fetch the section this item is in
	SectionFetchTime float32 `json:"section_fetch_time,omitempty"`
	// The actual title for display
	Title string `json:"title,omitempty"`
	// The actual url for display
	Url string `json:"url,omitempty"`
	// Whether the custom description should be used instead of the content description, if the item is associated with content
	UseCustomDescription bool `json:"use_custom_description,omitempty"`
	// Whether the custom image should be used instead of the content image, if the item is associated with content
	UseCustomImage bool `json:"use_custom_image,omitempty"`
	// Whether the custom title should be used instead of the content title, if the item is associated with content
	UseCustomTitle bool `json:"use_custom_title,omitempty"`
	// Whether the custom url should be used instead of the content url, if the item is associated with content
	UseCustomUrl bool `json:"use_custom_url,omitempty"`
	// Number of times content has been viewed, if present
	ViewCount int64 `json:"view_count,omitempty"`
}
