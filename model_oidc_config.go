/*
 * Looker API 4.0 (Experimental) Reference
 *
 *  Welcome to the future! This is an early preview of our next-generation Looker API 4.0. API 4.0 runs alongside APIs 3.1 and 3.0. We've tagged 4.0 as \"experimental\" to reflect that we have more work planned for API 4.0 which may include breaking changes. Please pardon our dust while we remodel a few rooms!  ### In This Release  We're spinning up this new API 4.0 version so that we can make adjustments to our API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to our stable API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Java, and more. Looker is also creating client SDKs to call the Looker API from these and other languages. These client SDKs will be available as pre-built packages for download from public repositories such as npmjs.org, RubyGems.org, PyPi.org. If you use an IDE for software development, you will soon be able to install a Looker SDK for your programming language with the click of a button!  While API 3.1 is still the defacto Looker API (\"current\", \"stable\", \"default\", etc), the bulk of our development activity will gradually shift to API 4.0.  
 *
 * API version: 4.0.7.18
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package looker
import (
	"time"
)
// OidcConfig struct for OidcConfig
type OidcConfig struct {
	// Operations the current user is able to perform on this object
	Can map[string]bool `json:"can,omitempty"`
	// Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
	AlternateEmailLoginAllowed bool `json:"alternate_email_login_allowed,omitempty"`
	// OpenID Provider Audience
	Audience string `json:"audience,omitempty"`
	// Users will not be allowed to login at all unless a role for them is found in OIDC if set to true
	AuthRequiresRole bool `json:"auth_requires_role,omitempty"`
	// OpenID Provider Authorization Url
	AuthorizationEndpoint string `json:"authorization_endpoint,omitempty"`
	// (Write-Only) Array of ids of groups that will be applied to new users the first time they login via OIDC
	DefaultNewUserGroupIds []int64 `json:"default_new_user_group_ids,omitempty"`
	// (Read-only) Groups that will be applied to new users the first time they login via OIDC
	DefaultNewUserGroups []Group `json:"default_new_user_groups,omitempty"`
	// (Write-Only) Array of ids of roles that will be applied to new users the first time they login via OIDC
	DefaultNewUserRoleIds []int64 `json:"default_new_user_role_ids,omitempty"`
	// (Read-only) Roles that will be applied to new users the first time they login via OIDC
	DefaultNewUserRoles []Role `json:"default_new_user_roles,omitempty"`
	// Enable/Disable OIDC authentication for the server
	Enabled bool `json:"enabled,omitempty"`
	// (Read-only) Array of mappings between OIDC Groups and Looker Roles
	Groups []OidcGroupRead `json:"groups,omitempty"`
	// Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'
	GroupsAttribute string `json:"groups_attribute,omitempty"`
	// (Read/Write) Array of mappings between OIDC Groups and arrays of Looker Role ids
	GroupsWithRoleIds []OidcGroupWrite `json:"groups_with_role_ids,omitempty"`
	// Relying Party Identifier (provided by OpenID Provider)
	Identifier string `json:"identifier,omitempty"`
	// OpenID Provider Issuer
	Issuer string `json:"issuer,omitempty"`
	// When this config was last modified
	ModifiedAt time.Time `json:"modified_at,omitempty"`
	// User id of user who last modified this config
	ModifiedBy int64 `json:"modified_by,omitempty"`
	// Merge first-time oidc login to existing user account by email addresses. When a user logs in for the first time via oidc this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'
	NewUserMigrationTypes string `json:"new_user_migration_types,omitempty"`
	// Array of scopes to request.
	Scopes []string `json:"scopes,omitempty"`
	// (Write-Only) Relying Party Secret (provided by OpenID Provider)
	Secret string `json:"secret,omitempty"`
	// Set user roles in Looker based on groups from OIDC
	SetRolesFromGroups bool `json:"set_roles_from_groups,omitempty"`
	// Slug to identify configurations that are created in order to run a OIDC config test
	TestSlug string `json:"test_slug,omitempty"`
	// OpenID Provider Token Url
	TokenEndpoint string `json:"token_endpoint,omitempty"`
	// Name of user record attributes used to indicate email address field
	UserAttributeMapEmail string `json:"user_attribute_map_email,omitempty"`
	// Name of user record attributes used to indicate first name
	UserAttributeMapFirstName string `json:"user_attribute_map_first_name,omitempty"`
	// Name of user record attributes used to indicate last name
	UserAttributeMapLastName string `json:"user_attribute_map_last_name,omitempty"`
	// (Read-only) Array of mappings between OIDC User Attributes and Looker User Attributes
	UserAttributes []OidcUserAttributeRead `json:"user_attributes,omitempty"`
	// (Read/Write) Array of mappings between OIDC User Attributes and arrays of Looker User Attribute ids
	UserAttributesWithIds []OidcUserAttributeWrite `json:"user_attributes_with_ids,omitempty"`
	// OpenID Provider User Information Url
	UserinfoEndpoint string `json:"userinfo_endpoint,omitempty"`
	// Allow OIDC auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.
	AllowNormalGroupMembership bool `json:"allow_normal_group_membership,omitempty"`
	// OIDC auth'd users will inherit roles from non-reflected Looker groups.
	AllowRolesFromNormalGroups bool `json:"allow_roles_from_normal_groups,omitempty"`
	// Allows roles to be directly assigned to OIDC auth'd users.
	AllowDirectRoles bool `json:"allow_direct_roles,omitempty"`
	// Link to get this item
	Url string `json:"url,omitempty"`
}
