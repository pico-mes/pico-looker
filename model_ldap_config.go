/*
 * Looker API 4.0 (Experimental) Reference
 *
 *  Welcome to the future! This is an early preview of our next-generation Looker API 4.0. API 4.0 runs alongside APIs 3.1 and 3.0. We've tagged 4.0 as \"experimental\" to reflect that we have more work planned for API 4.0 which may include breaking changes. Please pardon our dust while we remodel a few rooms!  ### In This Release  We're spinning up this new API 4.0 version so that we can make adjustments to our API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to our stable API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Java, and more. Looker is also creating client SDKs to call the Looker API from these and other languages. These client SDKs will be available as pre-built packages for download from public repositories such as npmjs.org, RubyGems.org, PyPi.org. If you use an IDE for software development, you will soon be able to install a Looker SDK for your programming language with the click of a button!  While API 3.1 is still the defacto Looker API (\"current\", \"stable\", \"default\", etc), the bulk of our development activity will gradually shift to API 4.0.  
 *
 * API version: 4.0.7.18
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package looker
// LdapConfig struct for LdapConfig
type LdapConfig struct {
	// Operations the current user is able to perform on this object
	Can map[string]bool `json:"can,omitempty"`
	// Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
	AlternateEmailLoginAllowed bool `json:"alternate_email_login_allowed,omitempty"`
	// (Write-Only)  Password for the LDAP account used to access the LDAP server
	AuthPassword string `json:"auth_password,omitempty"`
	// Users will not be allowed to login at all unless a role for them is found in LDAP if set to true
	AuthRequiresRole bool `json:"auth_requires_role,omitempty"`
	// Distinguished name of LDAP account used to access the LDAP server
	AuthUsername string `json:"auth_username,omitempty"`
	// LDAP server hostname
	ConnectionHost string `json:"connection_host,omitempty"`
	// LDAP host port
	ConnectionPort string `json:"connection_port,omitempty"`
	// Use Transport Layer Security
	ConnectionTls bool `json:"connection_tls,omitempty"`
	// Do not verify peer when using TLS
	ConnectionTlsNoVerify bool `json:"connection_tls_no_verify,omitempty"`
	// (Write-Only)  Array of ids of groups that will be applied to new users the first time they login via LDAP
	DefaultNewUserGroupIds []int64 `json:"default_new_user_group_ids,omitempty"`
	// (Read-only) Groups that will be applied to new users the first time they login via LDAP
	DefaultNewUserGroups []Group `json:"default_new_user_groups,omitempty"`
	// (Write-Only)  Array of ids of roles that will be applied to new users the first time they login via LDAP
	DefaultNewUserRoleIds []int64 `json:"default_new_user_role_ids,omitempty"`
	// (Read-only) Roles that will be applied to new users the first time they login via LDAP
	DefaultNewUserRoles []Role `json:"default_new_user_roles,omitempty"`
	// Enable/Disable LDAP authentication for the server
	Enabled bool `json:"enabled,omitempty"`
	// Don't attempt to do LDAP search result paging (RFC 2696) even if the LDAP server claims to support it.
	ForceNoPage bool `json:"force_no_page,omitempty"`
	// (Read-only) Array of mappings between LDAP Groups and Looker Roles
	Groups []LdapGroupRead `json:"groups,omitempty"`
	// Base dn for finding groups in LDAP searches
	GroupsBaseDn string `json:"groups_base_dn,omitempty"`
	// Identifier for a strategy for how Looker will search for groups in the LDAP server
	GroupsFinderType string `json:"groups_finder_type,omitempty"`
	// LDAP Group attribute that signifies the members of the groups. Most commonly 'member'
	GroupsMemberAttribute string `json:"groups_member_attribute,omitempty"`
	// Optional comma-separated list of supported LDAP objectclass for groups when doing groups searches
	GroupsObjectclasses string `json:"groups_objectclasses,omitempty"`
	// LDAP Group attribute that signifies the user in a group. Most commonly 'dn'
	GroupsUserAttribute string `json:"groups_user_attribute,omitempty"`
	// (Read/Write) Array of mappings between LDAP Groups and arrays of Looker Role ids
	GroupsWithRoleIds []LdapGroupWrite `json:"groups_with_role_ids,omitempty"`
	// (Read-only) Has the password been set for the LDAP account used to access the LDAP server
	HasAuthPassword bool `json:"has_auth_password,omitempty"`
	// Merge first-time ldap login to existing user account by email addresses. When a user logs in for the first time via ldap this option will connect this user into their existing account by finding the account with a matching email address. Otherwise a new user account will be created for the user.
	MergeNewUsersByEmail bool `json:"merge_new_users_by_email,omitempty"`
	// When this config was last modified
	ModifiedAt string `json:"modified_at,omitempty"`
	// User id of user who last modified this config
	ModifiedBy string `json:"modified_by,omitempty"`
	// Set user roles in Looker based on groups from LDAP
	SetRolesFromGroups bool `json:"set_roles_from_groups,omitempty"`
	// (Write-Only)  Test LDAP user password. For ldap tests only.
	TestLdapPassword string `json:"test_ldap_password,omitempty"`
	// (Write-Only)  Test LDAP user login id. For ldap tests only.
	TestLdapUser string `json:"test_ldap_user,omitempty"`
	// Name of user record attributes used to indicate email address field
	UserAttributeMapEmail string `json:"user_attribute_map_email,omitempty"`
	// Name of user record attributes used to indicate first name
	UserAttributeMapFirstName string `json:"user_attribute_map_first_name,omitempty"`
	// Name of user record attributes used to indicate last name
	UserAttributeMapLastName string `json:"user_attribute_map_last_name,omitempty"`
	// Name of user record attributes used to indicate unique record id
	UserAttributeMapLdapId string `json:"user_attribute_map_ldap_id,omitempty"`
	// (Read-only) Array of mappings between LDAP User Attributes and Looker User Attributes
	UserAttributes []LdapUserAttributeRead `json:"user_attributes,omitempty"`
	// (Read/Write) Array of mappings between LDAP User Attributes and arrays of Looker User Attribute ids
	UserAttributesWithIds []LdapUserAttributeWrite `json:"user_attributes_with_ids,omitempty"`
	// Distinguished name of LDAP node used as the base for user searches
	UserBindBaseDn string `json:"user_bind_base_dn,omitempty"`
	// (Optional) Custom RFC-2254 filter clause for use in finding user during login. Combined via 'and' with the other generated filter clauses.
	UserCustomFilter string `json:"user_custom_filter,omitempty"`
	// Name(s) of user record attributes used for matching user login id (comma separated list)
	UserIdAttributeNames string `json:"user_id_attribute_names,omitempty"`
	// (Optional) Name of user record objectclass used for finding user during login id
	UserObjectclass string `json:"user_objectclass,omitempty"`
	// Allow LDAP auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.
	AllowNormalGroupMembership bool `json:"allow_normal_group_membership,omitempty"`
	// LDAP auth'd users will be able to inherit roles from non-reflected Looker groups.
	AllowRolesFromNormalGroups bool `json:"allow_roles_from_normal_groups,omitempty"`
	// Allows roles to be directly assigned to LDAP auth'd users.
	AllowDirectRoles bool `json:"allow_direct_roles,omitempty"`
	// Link to get this item
	Url string `json:"url,omitempty"`
}
