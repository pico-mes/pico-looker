/*
 * Looker API 4.0 (Experimental) Reference
 *
 *  Welcome to the future! This is an early preview of our next-generation Looker API 4.0. API 4.0 runs alongside APIs 3.1 and 3.0. We've tagged 4.0 as \"experimental\" to reflect that we have more work planned for API 4.0 which may include breaking changes. Please pardon our dust while we remodel a few rooms!  ### In This Release  We're spinning up this new API 4.0 version so that we can make adjustments to our API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to our stable API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Java, and more. Looker is also creating client SDKs to call the Looker API from these and other languages. These client SDKs will be available as pre-built packages for download from public repositories such as npmjs.org, RubyGems.org, PyPi.org. If you use an IDE for software development, you will soon be able to install a Looker SDK for your programming language with the click of a button!  While API 3.1 is still the defacto Looker API (\"current\", \"stable\", \"default\", etc), the bulk of our development activity will gradually shift to API 4.0.  
 *
 * API version: 4.0.7.18
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package looker
// Project struct for Project
type Project struct {
	// Operations the current user is able to perform on this object
	Can map[string]bool `json:"can,omitempty"`
	// Project Id
	Id string `json:"id,omitempty"`
	// Project display name
	Name string `json:"name,omitempty"`
	// If true the project is configured with a git repository
	UsesGit bool `json:"uses_git,omitempty"`
	// Git remote repository url
	GitRemoteUrl string `json:"git_remote_url,omitempty"`
	// Git username for HTTPS authentication. (For production only, if using user attributes.)
	GitUsername string `json:"git_username,omitempty"`
	// (Write-Only) Git password for HTTPS authentication. (For production only, if using user attributes.)
	GitPassword string `json:"git_password,omitempty"`
	// User attribute name for username in per-user HTTPS authentication.
	GitUsernameUserAttribute string `json:"git_username_user_attribute,omitempty"`
	// User attribute name for password in per-user HTTPS authentication.
	GitPasswordUserAttribute string `json:"git_password_user_attribute,omitempty"`
	// Name of the git service provider
	GitServiceName string `json:"git_service_name,omitempty"`
	// Port that HTTP(S) application server is running on (for PRs, file browsing, etc.)
	GitApplicationServerHttpPort int64 `json:"git_application_server_http_port,omitempty"`
	// Scheme that is running on application server (for PRs, file browsing, etc.) Valid values are: \"http\", \"https\".
	GitApplicationServerHttpScheme string `json:"git_application_server_http_scheme,omitempty"`
	// (Write-Only) Optional secret token with which to authenticate requests to the webhook deploy endpoint. If not set, endpoint is unauthenticated.
	DeploySecret string `json:"deploy_secret,omitempty"`
	// (Write-Only) When true, unsets the deploy secret to allow unauthenticated access to the webhook deploy endpoint.
	UnsetDeploySecret bool `json:"unset_deploy_secret,omitempty"`
	// The git pull request policy for this project. Valid values are: \"off\", \"links\", \"recommended\", \"required\".
	PullRequestMode string `json:"pull_request_mode,omitempty"`
	// Validation policy: If true, the project must pass validation checks before project changes can be committed to the git repository
	ValidationRequired bool `json:"validation_required,omitempty"`
	// If true, advanced git release management is enabled for this project
	GitReleaseMgmtEnabled bool `json:"git_release_mgmt_enabled,omitempty"`
	// Validation policy: If true, the project can be committed with warnings when `validation_required` is true. (`allow_warnings` does nothing if `validation_required` is false).
	AllowWarnings bool `json:"allow_warnings,omitempty"`
	// If true the project is an example project and cannot be modified
	IsExample bool `json:"is_example,omitempty"`
	// Status of dependencies in your manifest & lockfile
	DependencyStatus string `json:"dependency_status,omitempty"`
}
