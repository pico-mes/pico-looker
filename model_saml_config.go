/*
 * Looker API 4.0 (Experimental) Reference
 *
 *  Welcome to the future! This is an early preview of our next-generation Looker API 4.0. API 4.0 runs alongside APIs 3.1 and 3.0. We've tagged 4.0 as \"experimental\" to reflect that we have more work planned for API 4.0 which may include breaking changes. Please pardon our dust while we remodel a few rooms!  ### In This Release  We're spinning up this new API 4.0 version so that we can make adjustments to our API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to our stable API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Java, and more. Looker is also creating client SDKs to call the Looker API from these and other languages. These client SDKs will be available as pre-built packages for download from public repositories such as npmjs.org, RubyGems.org, PyPi.org. If you use an IDE for software development, you will soon be able to install a Looker SDK for your programming language with the click of a button!  While API 3.1 is still the defacto Looker API (\"current\", \"stable\", \"default\", etc), the bulk of our development activity will gradually shift to API 4.0.  
 *
 * API version: 4.0.7.18
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package looker
// SamlConfig struct for SamlConfig
type SamlConfig struct {
	// Operations the current user is able to perform on this object
	Can map[string]bool `json:"can,omitempty"`
	// Enable/Disable Saml authentication for the server
	Enabled bool `json:"enabled,omitempty"`
	// Identity Provider Certificate (provided by IdP)
	IdpCert string `json:"idp_cert,omitempty"`
	// Identity Provider Url (provided by IdP)
	IdpUrl string `json:"idp_url,omitempty"`
	// Identity Provider Issuer (provided by IdP)
	IdpIssuer string `json:"idp_issuer,omitempty"`
	// Identity Provider Audience (set in IdP config). Optional in Looker. Set this only if you want Looker to validate the audience value returned by the IdP.
	IdpAudience string `json:"idp_audience,omitempty"`
	// Count of seconds of clock drift to allow when validating timestamps of assertions.
	AllowedClockDrift int64 `json:"allowed_clock_drift,omitempty"`
	// Name of user record attributes used to indicate email address field
	UserAttributeMapEmail string `json:"user_attribute_map_email,omitempty"`
	// Name of user record attributes used to indicate first name
	UserAttributeMapFirstName string `json:"user_attribute_map_first_name,omitempty"`
	// Name of user record attributes used to indicate last name
	UserAttributeMapLastName string `json:"user_attribute_map_last_name,omitempty"`
	// Merge first-time saml login to existing user account by email addresses. When a user logs in for the first time via saml this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'
	NewUserMigrationTypes string `json:"new_user_migration_types,omitempty"`
	// Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
	AlternateEmailLoginAllowed bool `json:"alternate_email_login_allowed,omitempty"`
	// Slug to identify configurations that are created in order to run a Saml config test
	TestSlug string `json:"test_slug,omitempty"`
	// When this config was last modified
	ModifiedAt string `json:"modified_at,omitempty"`
	// User id of user who last modified this config
	ModifiedBy string `json:"modified_by,omitempty"`
	// (Read-only) Roles that will be applied to new users the first time they login via Saml
	DefaultNewUserRoles []Role `json:"default_new_user_roles,omitempty"`
	// (Read-only) Groups that will be applied to new users the first time they login via Saml
	DefaultNewUserGroups []Group `json:"default_new_user_groups,omitempty"`
	// (Write-Only) Array of ids of roles that will be applied to new users the first time they login via Saml
	DefaultNewUserRoleIds []int64 `json:"default_new_user_role_ids,omitempty"`
	// (Write-Only) Array of ids of groups that will be applied to new users the first time they login via Saml
	DefaultNewUserGroupIds []int64 `json:"default_new_user_group_ids,omitempty"`
	// Set user roles in Looker based on groups from Saml
	SetRolesFromGroups bool `json:"set_roles_from_groups,omitempty"`
	// Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'
	GroupsAttribute string `json:"groups_attribute,omitempty"`
	// (Read-only) Array of mappings between Saml Groups and Looker Roles
	Groups []SamlGroupRead `json:"groups,omitempty"`
	// (Read/Write) Array of mappings between Saml Groups and arrays of Looker Role ids
	GroupsWithRoleIds []SamlGroupWrite `json:"groups_with_role_ids,omitempty"`
	// Users will not be allowed to login at all unless a role for them is found in Saml if set to true
	AuthRequiresRole bool `json:"auth_requires_role,omitempty"`
	// (Read-only) Array of mappings between Saml User Attributes and Looker User Attributes
	UserAttributes []SamlUserAttributeRead `json:"user_attributes,omitempty"`
	// (Read/Write) Array of mappings between Saml User Attributes and arrays of Looker User Attribute ids
	UserAttributesWithIds []SamlUserAttributeWrite `json:"user_attributes_with_ids,omitempty"`
	// Identifier for a strategy for how Looker will find groups in the SAML response. One of ['grouped_attribute_values', 'individual_attributes']
	GroupsFinderType string `json:"groups_finder_type,omitempty"`
	// Value for group attribute used to indicate membership. Used when 'groups_finder_type' is set to 'individual_attributes'
	GroupsMemberValue string `json:"groups_member_value,omitempty"`
	// Bypass the login page when user authentication is required. Redirect to IdP immediately instead.
	BypassLoginPage bool `json:"bypass_login_page,omitempty"`
	// Allow SAML auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.
	AllowNormalGroupMembership bool `json:"allow_normal_group_membership,omitempty"`
	// SAML auth'd users will inherit roles from non-reflected Looker groups.
	AllowRolesFromNormalGroups bool `json:"allow_roles_from_normal_groups,omitempty"`
	// Allows roles to be directly assigned to SAML auth'd users.
	AllowDirectRoles bool `json:"allow_direct_roles,omitempty"`
	// Link to get this item
	Url string `json:"url,omitempty"`
}
