/*
 * Looker API 4.0 (Experimental) Reference
 *
 *  Welcome to the future! This is an early preview of our next-generation Looker API 4.0. API 4.0 runs alongside APIs 3.1 and 3.0. We've tagged 4.0 as \"experimental\" to reflect that we have more work planned for API 4.0 which may include breaking changes. Please pardon our dust while we remodel a few rooms!  ### In This Release  We're spinning up this new API 4.0 version so that we can make adjustments to our API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to our stable API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Java, and more. Looker is also creating client SDKs to call the Looker API from these and other languages. These client SDKs will be available as pre-built packages for download from public repositories such as npmjs.org, RubyGems.org, PyPi.org. If you use an IDE for software development, you will soon be able to install a Looker SDK for your programming language with the click of a button!  While API 3.1 is still the defacto Looker API (\"current\", \"stable\", \"default\", etc), the bulk of our development activity will gradually shift to API 4.0.  
 *
 * API version: 4.0.7.18
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package looker
// RenderTask struct for RenderTask
type RenderTask struct {
	// Operations the current user is able to perform on this object
	Can map[string]bool `json:"can,omitempty"`
	// Date/Time render task was created
	CreatedAt string `json:"created_at,omitempty"`
	// Filter values to apply to the dashboard queries, in URL query format
	DashboardFilters string `json:"dashboard_filters,omitempty"`
	// Id of dashboard to render
	DashboardId int64 `json:"dashboard_id,omitempty"`
	// Dashboard layout style: single_column or tiled
	DashboardStyle string `json:"dashboard_style,omitempty"`
	// Date/Time render task was completed
	FinalizedAt string `json:"finalized_at,omitempty"`
	// Output height in pixels. Flowed layouts may ignore this value.
	Height int64 `json:"height,omitempty"`
	// Id of this render task
	Id string `json:"id,omitempty"`
	// Id of look to render
	LookId int64 `json:"look_id,omitempty"`
	// Id of lookml dashboard to render
	LookmlDashboardId string `json:"lookml_dashboard_id,omitempty"`
	// Id of query to render
	QueryId int64 `json:"query_id,omitempty"`
	// Number of seconds elapsed running queries
	QueryRuntime float64 `json:"query_runtime,omitempty"`
	// Number of seconds elapsed rendering data
	RenderRuntime float64 `json:"render_runtime,omitempty"`
	// Output format: pdf, png, or jpg
	ResultFormat string `json:"result_format,omitempty"`
	// Total seconds elapsed for render task
	Runtime float64 `json:"runtime,omitempty"`
	// Render task status: enqueued_for_query, querying, enqueued_for_render, rendering, success, failure
	Status string `json:"status,omitempty"`
	// Additional information about the current status
	StatusDetail string `json:"status_detail,omitempty"`
	// The user account permissions in which the render task will execute
	UserId int64 `json:"user_id,omitempty"`
	// Output width in pixels
	Width int64 `json:"width,omitempty"`
}
