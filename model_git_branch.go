/*
 * Looker API 4.0 (Experimental) Reference
 *
 *  Welcome to the future! This is an early preview of our next-generation Looker API 4.0. API 4.0 runs alongside APIs 3.1 and 3.0. We've tagged 4.0 as \"experimental\" to reflect that we have more work planned for API 4.0 which may include breaking changes. Please pardon our dust while we remodel a few rooms!  ### In This Release  We're spinning up this new API 4.0 version so that we can make adjustments to our API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to our stable API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Java, and more. Looker is also creating client SDKs to call the Looker API from these and other languages. These client SDKs will be available as pre-built packages for download from public repositories such as npmjs.org, RubyGems.org, PyPi.org. If you use an IDE for software development, you will soon be able to install a Looker SDK for your programming language with the click of a button!  While API 3.1 is still the defacto Looker API (\"current\", \"stable\", \"default\", etc), the bulk of our development activity will gradually shift to API 4.0.  
 *
 * API version: 4.0.7.18
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package looker
// GitBranch struct for GitBranch
type GitBranch struct {
	// Operations the current user is able to perform on this object
	Can map[string]bool `json:"can,omitempty"`
	// The short name on the local. Updating `name` results in `git checkout <new_name>`
	Name string `json:"name,omitempty"`
	// The name of the remote
	Remote string `json:"remote,omitempty"`
	// The short name on the remote
	RemoteName string `json:"remote_name,omitempty"`
	// Name of error
	Error string `json:"error,omitempty"`
	// Message describing an error if present
	Message string `json:"message,omitempty"`
	// Name of the owner of a personal branch
	OwnerName string `json:"owner_name,omitempty"`
	// Whether or not this branch is readonly
	Readonly bool `json:"readonly,omitempty"`
	// Whether or not this branch is a personal branch - readonly for all developers except the owner
	Personal bool `json:"personal,omitempty"`
	// Whether or not a local ref exists for the branch
	IsLocal bool `json:"is_local,omitempty"`
	// Whether or not a remote ref exists for the branch
	IsRemote bool `json:"is_remote,omitempty"`
	// Whether or not this is the production branch
	IsProduction bool `json:"is_production,omitempty"`
	// Number of commits the local branch is ahead of the remote
	AheadCount int64 `json:"ahead_count,omitempty"`
	// Number of commits the local branch is behind the remote
	BehindCount int64 `json:"behind_count,omitempty"`
	// UNIX timestamp at which this branch was last committed.
	CommitAt int64 `json:"commit_at,omitempty"`
	// The resolved ref of this branch. Updating `ref` results in `git reset --hard <new_ref>``.
	Ref string `json:"ref,omitempty"`
	// The resolved ref of this branch remote.
	RemoteRef string `json:"remote_ref,omitempty"`
}
