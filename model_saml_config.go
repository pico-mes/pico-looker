/*
 * Looker API 3.1 Reference
 *
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  Note! With great power comes great responsibility: The \"Try It Out!\" button makes API calls to your live Looker instance. Be especially careful with destructive API operations such as `delete_user` or similar. There is no \"undo\" for API operations.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning)  ### In This Release  The following are a few examples of noteworthy items that have changed between API 3.0 and API 3.1. For more comprehensive coverage of API changes, please see the release notes for your Looker release.  ### Examples of new things added in API 3.1 (compared to API 3.0):  * [Dashboard construction](#!/3.1/Dashboard/) APIs * [Themes](#!/3.1/Theme/) and [custom color collections](#!/3.1/ColorCollection) APIs * Create and run [SQL Runner](#!/3.1/Query/run_sql_query) queries * Create and run [merged results](#!/3.1/Query/create_merge_query) queries * Create and modify [dashboard filters](#!/3.1/Dashboard/create_dashboard_filter) * Create and modify [password requirements](#!/3.1/Auth/password_config)  ### Deprecated in API 3.0  The following functions and properties have been deprecated in API 3.0.  They continue to exist and work in API 3.0 for the next several Looker releases but they have not been carried forward to API 3.1:  * Dashboard Prefetch functions * User access_filter functions * User API 1.0 credentials functions * Space.is_root and Space.is_user_root properties. Use Space.is_shared_root and Space.is_users_root instead.  ### Semantic changes in API 3.1:  * [all_looks()](#!/3.1/Look/all_looks) no longer includes soft-deleted looks, matching [all_dashboards()](#!/3.1/Dashboard/all_dashboards) behavior. You can find soft-deleted looks using [search_looks()](#!/3.1/Look/search_looks) with the `deleted` param set to True. * [all_spaces()](#!/3.1/Space/all_spaces) no longer includes duplicate items * [search_users()](#!/3.1/User/search_users) no longer accepts Y,y,1,0,N,n for Boolean params, only \"true\" and \"false\". * For greater client and network compatibility, [render_task_results](#!/3.1/RenderTask/render_task_results) now returns HTTP status **202 Accepted** instead of HTTP status **102 Processing** * [all_running_queries()](#!/3.1/Query/all_running_queries) and [kill_query](#!/3.1/Query/kill_query) functions have moved into the [Query](#!/3.1/Query/) function group.   If you have application code which relies on the old behavior of the APIs above, you may continue using the API 3.0 functions in this Looker release. We strongly suggest you update your code to use API 3.1 analogs as soon as possible.  
 *
 * API version: 3.1.0
 * Contact: support@looker.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package looker
// SamlConfig struct for SamlConfig
type SamlConfig struct {
	// Operations the current user is able to perform on this object
	Can map[string]bool `json:"can,omitempty"`
	// Enable/Disable Saml authentication for the server
	Enabled bool `json:"enabled,omitempty"`
	// Identity Provider Certificate (provided by IdP)
	IdpCert string `json:"idp_cert,omitempty"`
	// Identity Provider Url (provided by IdP)
	IdpUrl string `json:"idp_url,omitempty"`
	// Identity Provider Issuer (provided by IdP)
	IdpIssuer string `json:"idp_issuer,omitempty"`
	// Identity Provider Audience (set in IdP config). Optional in Looker. Set this only if you want Looker to validate the audience value returned by the IdP.
	IdpAudience string `json:"idp_audience,omitempty"`
	// Count of seconds of clock drift to allow when validating timestamps of assertions.
	AllowedClockDrift int64 `json:"allowed_clock_drift,omitempty"`
	// Name of user record attributes used to indicate email address field
	UserAttributeMapEmail string `json:"user_attribute_map_email,omitempty"`
	// Name of user record attributes used to indicate first name
	UserAttributeMapFirstName string `json:"user_attribute_map_first_name,omitempty"`
	// Name of user record attributes used to indicate last name
	UserAttributeMapLastName string `json:"user_attribute_map_last_name,omitempty"`
	// Merge first-time saml login to existing user account by email addresses. When a user logs in for the first time via saml this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'
	NewUserMigrationTypes string `json:"new_user_migration_types,omitempty"`
	// Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
	AlternateEmailLoginAllowed bool `json:"alternate_email_login_allowed,omitempty"`
	// Slug to identify configurations that are created in order to run a Saml config test
	TestSlug string `json:"test_slug,omitempty"`
	// When this config was last modified
	ModifiedAt string `json:"modified_at,omitempty"`
	// User id of user who last modified this config
	ModifiedBy string `json:"modified_by,omitempty"`
	// (Read-only) Roles that will be applied to new users the first time they login via Saml
	DefaultNewUserRoles []Role `json:"default_new_user_roles,omitempty"`
	// (Read-only) Groups that will be applied to new users the first time they login via Saml
	DefaultNewUserGroups []Group `json:"default_new_user_groups,omitempty"`
	// (Write-Only) Array of ids of roles that will be applied to new users the first time they login via Saml
	DefaultNewUserRoleIds []int64 `json:"default_new_user_role_ids,omitempty"`
	// (Write-Only) Array of ids of groups that will be applied to new users the first time they login via Saml
	DefaultNewUserGroupIds []int64 `json:"default_new_user_group_ids,omitempty"`
	// Set user roles in Looker based on groups from Saml
	SetRolesFromGroups bool `json:"set_roles_from_groups,omitempty"`
	// Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'
	GroupsAttribute string `json:"groups_attribute,omitempty"`
	// (Read-only) Array of mappings between Saml Groups and Looker Roles
	Groups []SamlGroupRead `json:"groups,omitempty"`
	// (Read/Write) Array of mappings between Saml Groups and arrays of Looker Role ids
	GroupsWithRoleIds []SamlGroupWrite `json:"groups_with_role_ids,omitempty"`
	// Users will not be allowed to login at all unless a role for them is found in Saml if set to true
	AuthRequiresRole bool `json:"auth_requires_role,omitempty"`
	// (Read-only) Array of mappings between Saml User Attributes and Looker User Attributes
	UserAttributes []SamlUserAttributeRead `json:"user_attributes,omitempty"`
	// (Read/Write) Array of mappings between Saml User Attributes and arrays of Looker User Attribute ids
	UserAttributesWithIds []SamlUserAttributeWrite `json:"user_attributes_with_ids,omitempty"`
	// Identifier for a strategy for how Looker will find groups in the SAML response. One of ['grouped_attribute_values', 'individual_attributes']
	GroupsFinderType string `json:"groups_finder_type,omitempty"`
	// Value for group attribute used to indicate membership. Used when 'groups_finder_type' is set to 'individual_attributes'
	GroupsMemberValue string `json:"groups_member_value,omitempty"`
	// Bypass the login page when user authentication is required. Redirect to IdP immediately instead.
	BypassLoginPage bool `json:"bypass_login_page,omitempty"`
	// Allow SAML auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.
	AllowNormalGroupMembership bool `json:"allow_normal_group_membership,omitempty"`
	// SAML auth'd users will inherit roles from non-reflected Looker groups.
	AllowRolesFromNormalGroups bool `json:"allow_roles_from_normal_groups,omitempty"`
	// Allows roles to be directly assigned to SAML auth'd users.
	AllowDirectRoles bool `json:"allow_direct_roles,omitempty"`
	// Link to get this item
	Url string `json:"url,omitempty"`
}
