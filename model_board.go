/*
 * Looker API 4.0 (Experimental) Reference
 *
 *  Welcome to the future! This is an early preview of our next-generation Looker API 4.0. API 4.0 runs alongside APIs 3.1 and 3.0. We've tagged 4.0 as \"experimental\" to reflect that we have more work planned for API 4.0 which may include breaking changes. Please pardon our dust while we remodel a few rooms!  ### In This Release  We're spinning up this new API 4.0 version so that we can make adjustments to our API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to our stable API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Java, and more. Looker is also creating client SDKs to call the Looker API from these and other languages. These client SDKs will be available as pre-built packages for download from public repositories such as npmjs.org, RubyGems.org, PyPi.org. If you use an IDE for software development, you will soon be able to install a Looker SDK for your programming language with the click of a button!  While API 3.1 is still the defacto Looker API (\"current\", \"stable\", \"default\", etc), the bulk of our development activity will gradually shift to API 4.0.  
 *
 * API version: 4.0.7.18
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package looker
import (
	"time"
)
// Board struct for Board
type Board struct {
	// Operations the current user is able to perform on this object
	Can map[string]bool `json:"can,omitempty"`
	// Id of associated content_metadata record
	ContentMetadataId int64 `json:"content_metadata_id,omitempty"`
	// Date of board creation
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Date of board deletion
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Description of the board
	Description string `json:"description,omitempty"`
	// Sections of the board
	BoardSections []BoardSection `json:"board_sections,omitempty"`
	// Unique Id
	Id int64 `json:"id,omitempty"`
	// ids of the board sections in the order they should be displayed
	SectionOrder []int64 `json:"section_order,omitempty"`
	// Title of the board
	Title string `json:"title,omitempty"`
	// Date of last board update
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// User id of board creator
	UserId int64 `json:"user_id,omitempty"`
	// Whether the board is the primary homepage or not
	PrimaryHomepage bool `json:"primary_homepage,omitempty"`
}
