/*
 * Looker API 4.0 (Experimental) Reference
 *
 *  Welcome to the future! This is an early preview of our next-generation Looker API 4.0. API 4.0 runs alongside APIs 3.1 and 3.0. We've tagged 4.0 as \"experimental\" to reflect that we have more work planned for API 4.0 which may include breaking changes. Please pardon our dust while we remodel a few rooms!  ### In This Release  We're spinning up this new API 4.0 version so that we can make adjustments to our API functions, parameters, and response types to fix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can make to our stable API 3.1.  One benefit of these type adjustments in API 4.0 is dramatically better support for strongly typed languages like TypeScript, Kotlin, Java, and more. Looker is also creating client SDKs to call the Looker API from these and other languages. These client SDKs will be available as pre-built packages for download from public repositories such as npmjs.org, RubyGems.org, PyPi.org. If you use an IDE for software development, you will soon be able to install a Looker SDK for your programming language with the click of a button!  While API 3.1 is still the defacto Looker API (\"current\", \"stable\", \"default\", etc), the bulk of our development activity will gradually shift to API 4.0.  
 *
 * API version: 4.0.7.18
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package looker
// WriteScheduledPlan struct for WriteScheduledPlan
type WriteScheduledPlan struct {
	// Name of this scheduled plan
	Name string `json:"name,omitempty"`
	// User Id which owns this scheduled plan
	UserId int64 `json:"user_id,omitempty"`
	// Whether schedule is run as recipient (only applicable for email recipients)
	RunAsRecipient bool `json:"run_as_recipient,omitempty"`
	// Whether the ScheduledPlan is enabled
	Enabled bool `json:"enabled,omitempty"`
	// Id of a look
	LookId int64 `json:"look_id,omitempty"`
	// Id of a dashboard
	DashboardId int64 `json:"dashboard_id,omitempty"`
	// Id of a LookML dashboard
	LookmlDashboardId string `json:"lookml_dashboard_id,omitempty"`
	// Query string to run look or dashboard with
	FiltersString string `json:"filters_string,omitempty"`
	// (DEPRECATED) Alias for filters_string field
	DashboardFilters string `json:"dashboard_filters,omitempty"`
	// Delivery should occur if running the dashboard or look returns results
	RequireResults bool `json:"require_results,omitempty"`
	// Delivery should occur if the dashboard look does not return results
	RequireNoResults bool `json:"require_no_results,omitempty"`
	// Delivery should occur if data have changed since the last run
	RequireChange bool `json:"require_change,omitempty"`
	// Will run an unlimited query and send all results.
	SendAllResults bool `json:"send_all_results,omitempty"`
	// Vixie-Style crontab specification when to run
	Crontab string `json:"crontab,omitempty"`
	// Name of a datagroup; if specified will run when datagroup triggered (can't be used with cron string)
	Datagroup string `json:"datagroup,omitempty"`
	// Timezone for interpreting the specified crontab (default is Looker instance timezone)
	Timezone string `json:"timezone,omitempty"`
	// Query id
	QueryId string `json:"query_id,omitempty"`
	// Scheduled plan destinations
	ScheduledPlanDestination []ScheduledPlanDestination `json:"scheduled_plan_destination,omitempty"`
	// Whether the plan in question should only be run once (usually for testing)
	RunOnce bool `json:"run_once,omitempty"`
	// Whether links back to Looker should be included in this ScheduledPlan
	IncludeLinks bool `json:"include_links,omitempty"`
	// The size of paper the PDF should be formatted to fit. Valid values are: \"letter\", \"legal\", \"tabloid\", \"a0\", \"a1\", \"a2\", \"a3\", \"a4\", \"a5\".
	PdfPaperSize string `json:"pdf_paper_size,omitempty"`
	// Whether the PDF should be formatted for landscape orientation
	PdfLandscape bool `json:"pdf_landscape,omitempty"`
	// Whether this schedule is in an embed context or not
	Embed bool `json:"embed,omitempty"`
	// Color scheme of the dashboard if applicable
	ColorTheme string `json:"color_theme,omitempty"`
	// Whether or not to expand table vis to full length
	LongTables bool `json:"long_tables,omitempty"`
	// The pixel width at which we render the inline table visualizations
	InlineTableWidth int64 `json:"inline_table_width,omitempty"`
}
