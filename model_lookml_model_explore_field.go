/*
 * Looker API 3.1 Reference
 *
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  Note! With great power comes great responsibility: The \"Try It Out!\" button makes API calls to your live Looker instance. Be especially careful with destructive API operations such as `delete_user` or similar. There is no \"undo\" for API operations.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning)  ### In This Release  The following are a few examples of noteworthy items that have changed between API 3.0 and API 3.1. For more comprehensive coverage of API changes, please see the release notes for your Looker release.  ### Examples of new things added in API 3.1 (compared to API 3.0):  * [Dashboard construction](#!/3.1/Dashboard/) APIs * [Themes](#!/3.1/Theme/) and [custom color collections](#!/3.1/ColorCollection) APIs * Create and run [SQL Runner](#!/3.1/Query/run_sql_query) queries * Create and run [merged results](#!/3.1/Query/create_merge_query) queries * Create and modify [dashboard filters](#!/3.1/Dashboard/create_dashboard_filter) * Create and modify [password requirements](#!/3.1/Auth/password_config)  ### Deprecated in API 3.0  The following functions and properties have been deprecated in API 3.0.  They continue to exist and work in API 3.0 for the next several Looker releases but they have not been carried forward to API 3.1:  * Dashboard Prefetch functions * User access_filter functions * User API 1.0 credentials functions * Space.is_root and Space.is_user_root properties. Use Space.is_shared_root and Space.is_users_root instead.  ### Semantic changes in API 3.1:  * [all_looks()](#!/3.1/Look/all_looks) no longer includes soft-deleted looks, matching [all_dashboards()](#!/3.1/Dashboard/all_dashboards) behavior. You can find soft-deleted looks using [search_looks()](#!/3.1/Look/search_looks) with the `deleted` param set to True. * [all_spaces()](#!/3.1/Space/all_spaces) no longer includes duplicate items * [search_users()](#!/3.1/User/search_users) no longer accepts Y,y,1,0,N,n for Boolean params, only \"true\" and \"false\". * For greater client and network compatibility, [render_task_results](#!/3.1/RenderTask/render_task_results) now returns HTTP status **202 Accepted** instead of HTTP status **102 Processing** * [all_running_queries()](#!/3.1/Query/all_running_queries) and [kill_query](#!/3.1/Query/kill_query) functions have moved into the [Query](#!/3.1/Query/) function group.   If you have application code which relies on the old behavior of the APIs above, you may continue using the API 3.0 functions in this Looker release. We strongly suggest you update your code to use API 3.1 analogs as soon as possible.  
 *
 * API version: 3.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package looker
// LookmlModelExploreField struct for LookmlModelExploreField
type LookmlModelExploreField struct {
	// The appropriate horizontal text alignment the values of this field should be displayed in. Valid values are: \"left\", \"right\".
	Align string `json:"align,omitempty"`
	// Whether it's possible to filter on this field.
	CanFilter bool `json:"can_filter,omitempty"`
	// Field category Valid values are: \"parameter\", \"filter\", \"measure\", \"dimension\".
	Category string `json:"category,omitempty"`
	// The default value that this field uses when filtering. Null if there is no default value.
	DefaultFilterValue string `json:"default_filter_value,omitempty"`
	// Description
	Description string `json:"description,omitempty"`
	// An array enumerating all the possible values that this field can contain. When null, there is no limit to the set of possible values this field can contain.
	Enumerations []LookmlModelExploreFieldEnumeration `json:"enumerations,omitempty"`
	// An error message indicating a problem with the definition of this field. If there are no errors, this will be null.
	Error string `json:"error,omitempty"`
	// A label creating a grouping of fields. All fields with this label should be presented together when displayed in a UI.
	FieldGroupLabel string `json:"field_group_label,omitempty"`
	// When presented in a field group via field_group_label, a shorter name of the field to be displayed in that context.
	FieldGroupVariant string `json:"field_group_variant,omitempty"`
	// The style of dimension fill that is possible for this field. Null if no dimension fill is possible. Valid values are: \"enumeration\", \"range\".
	FillStyle string `json:"fill_style,omitempty"`
	// An offset (in months) from the calendar start month to the fiscal start month defined in the LookML model this field belongs to.
	FiscalMonthOffset int64 `json:"fiscal_month_offset,omitempty"`
	// Whether this field has a set of allowed_values specified in LookML.
	HasAllowedValues bool `json:"has_allowed_values,omitempty"`
	// Whether this field should be hidden from the user interface.
	Hidden bool `json:"hidden,omitempty"`
	// Whether this field is a filter.
	IsFilter bool `json:"is_filter,omitempty"`
	// Whether this field represents a fiscal time value.
	IsFiscal bool `json:"is_fiscal,omitempty"`
	// Whether this field is of a type that represents a numeric value.
	IsNumeric bool `json:"is_numeric,omitempty"`
	// Whether this field is of a type that represents a time value.
	IsTimeframe bool `json:"is_timeframe,omitempty"`
	// Whether this field can be time filtered.
	CanTimeFilter bool `json:"can_time_filter,omitempty"`
	TimeInterval LookmlModelExploreFieldTimeInterval `json:"time_interval,omitempty"`
	// Fully-qualified human-readable label of the field.
	Label string `json:"label,omitempty"`
	// The name of the parameter that will provide a parameterized label for this field, if available in the current context.
	LabelFromParameter string `json:"label_from_parameter,omitempty"`
	// The human-readable label of the field, without the view label.
	LabelShort string `json:"label_short,omitempty"`
	// A URL linking to the definition of this field in the LookML IDE.
	LookmlLink string `json:"lookml_link,omitempty"`
	MapLayer LookmlModelExploreFieldMapLayer `json:"map_layer,omitempty"`
	// Whether this field is a measure.
	Measure bool `json:"measure,omitempty"`
	// Fully-qualified name of the field.
	Name string `json:"name,omitempty"`
	// If yes, the field will not be localized with the user attribute number_format. Defaults to no
	StrictValueFormat bool `json:"strict_value_format,omitempty"`
	// Whether this field is a parameter.
	Parameter bool `json:"parameter,omitempty"`
	// Whether this field can be removed from a query.
	Permanent bool `json:"permanent,omitempty"`
	// Whether or not the field represents a primary key.
	PrimaryKey bool `json:"primary_key,omitempty"`
	// The name of the project this field is defined in.
	ProjectName string `json:"project_name,omitempty"`
	// When true, it's not possible to re-sort this field's values without re-running the SQL query, due to database logic that affects the sort.
	RequiresRefreshOnSort bool `json:"requires_refresh_on_sort,omitempty"`
	// The LookML scope this field belongs to. The scope is typically the field's view.
	Scope string `json:"scope,omitempty"`
	// Whether this field can be sorted.
	Sortable bool `json:"sortable,omitempty"`
	// The path portion of source_file_path.
	SourceFile string `json:"source_file,omitempty"`
	// The fully-qualified path of the project file this field is defined in.
	SourceFilePath string `json:"source_file_path,omitempty"`
	// SQL expression as defined in the LookML model. The SQL syntax shown here is a representation intended for auditability, and is not neccessarily an exact match for what will ultimately be run in the database. It may contain special LookML syntax or annotations that are not valid SQL. This will be null if the current user does not have the see_lookml permission for the field's model.
	Sql string `json:"sql,omitempty"`
	// An array of conditions and values that make up a SQL Case expression, as defined in the LookML model. The SQL syntax shown here is a representation intended for auditability, and is not neccessarily an exact match for what will ultimately be run in the database. It may contain special LookML syntax or annotations that are not valid SQL. This will be null if the current user does not have the see_lookml permission for the field's model.
	SqlCase []LookmlModelExploreFieldSqlCase `json:"sql_case,omitempty"`
	// Array of filter conditions defined for the measure in LookML.
	Filters []LookmlModelExploreFieldMeasureFilters `json:"filters,omitempty"`
	// The name of the dimension to base suggest queries from.
	SuggestDimension string `json:"suggest_dimension,omitempty"`
	// The name of the explore to base suggest queries from.
	SuggestExplore string `json:"suggest_explore,omitempty"`
	// Whether or not suggestions are possible for this field.
	Suggestable bool `json:"suggestable,omitempty"`
	// If available, a list of suggestions for this field. For most fields, a suggest query is a more appropriate way to get an up-to-date list of suggestions. Or use enumerations to list all the possible values.
	Suggestions []string `json:"suggestions,omitempty"`
	// An array of arbitrary string tags provided in the model for this field.
	Tags []string `json:"tags,omitempty"`
	// The LookML type of the field.
	Type string `json:"type,omitempty"`
	// An array of user attribute types that are allowed to be used in filters on this field. Valid values are: \"advanced_filter_string\", \"advanced_filter_number\", \"advanced_filter_datetime\", \"string\", \"number\", \"datetime\", \"relative_url\", \"yesno\", \"zipcode\".
	UserAttributeFilterTypes []string `json:"user_attribute_filter_types,omitempty"`
	// If specified, the LookML value format string for formatting values of this field.
	ValueFormat string `json:"value_format,omitempty"`
	// The name of the view this field belongs to.
	View string `json:"view,omitempty"`
	// The human-readable label of the view the field belongs to.
	ViewLabel string `json:"view_label,omitempty"`
	// Whether this field was specified in \"dynamic_fields\" and is not part of the model.
	Dynamic bool `json:"dynamic,omitempty"`
	// The name of the starting day of the week. Valid values are: \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\".
	WeekStartDay string `json:"week_start_day,omitempty"`
}
